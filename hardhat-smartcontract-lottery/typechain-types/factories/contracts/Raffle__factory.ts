/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entraceFeed",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEthEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "players",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerSelected",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFeed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOnePlayer",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610180604052600163ffffffff166101209063ffffffff168152503480156200002757600080fd5b50604051620018433803806200184383398181016040528101906200004d9190620002a9565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508561014081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff0219169083600181111562000122576200012162000345565b5b02179055504260028190555080610160818152505050505050505062000374565b600080fd5b6000819050919050565b6200015d8162000148565b81146200016957600080fd5b50565b6000815190506200017d8162000152565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b08262000183565b9050919050565b620001c281620001a3565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000819050919050565b620001fd81620001e8565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b600067ffffffffffffffff82169050919050565b620002428162000223565b81146200024e57600080fd5b50565b600081519050620002628162000237565b92915050565b600063ffffffff82169050919050565b620002838162000268565b81146200028f57600080fd5b50565b600081519050620002a38162000278565b92915050565b60008060008060008060c08789031215620002c957620002c862000143565b5b6000620002d989828a016200016c565b9650506020620002ec89828a01620001d1565b9550506040620002ff89828a016200020c565b94505060606200031289828a0162000251565b93505060806200032589828a0162000292565b92505060a06200033889828a016200016c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051611454620003ef60003960006107d20152600081816103d001526108830152600081816106a10152610855015260006106800152600061065d0152600061063c01526000610600015260008181610310015261036401526114546000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461019b5780635f1b0fd8146101c65780636e04ff0d146101f15780636f9d9c841461022f578063b97cd82c1461025a578063c1c244e814610285576100a7565b80630c9be7e5146100ac578063115cbaf5146100e95780631fe543e3146101145780632cfcc5391461013d5780634529cae7146101475780634585e33b14610172575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610bd3565b6102b0565b6040516100e09190610c41565b60405180910390f35b3480156100f557600080fd5b506100fe6102f7565b60405161010b9190610cd3565b60405180910390f35b34801561012057600080fd5b5061013b60048036038101906101369190610e47565b61030e565b005b6101456103ce565b005b34801561015357600080fd5b5061015c61053d565b6040516101699190610eb2565b60405180910390f35b34801561017e57600080fd5b5061019960048036038101906101949190610f28565b610549565b005b3480156101a757600080fd5b506101b0610758565b6040516101bd9190610f96565b60405180910390f35b3480156101d257600080fd5b506101db610782565b6040516101e89190610eb2565b60405180910390f35b3480156101fd57600080fd5b5061021860048036038101906102139190611066565b61078f565b604051610226929190611149565b60405180910390f35b34801561023b57600080fd5b50610244610851565b6040516102519190610eb2565b60405180910390f35b34801561026657600080fd5b5061026f61087f565b60405161027c9190610eb2565b60405180910390f35b34801561029157600080fd5b5061029a6108a7565b6040516102a79190610eb2565b60405180910390f35b60008082815481106102c5576102c4611179565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b79291906111a8565b60405180910390fd5b6103ca82826108b1565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610428576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043c5761043b610c5c565b5b600160149054906101000a900460ff16600181111561045e5761045d610c5c565b5b14610495576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008080549050905090565b60006105636040518060200160405280600081525061078f565b509050806105d25747600080549050600160149054906101000a900460ff16600181111561059457610593610c5c565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016105c9939291906111d1565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105f7576105f6610c5c565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b81526004016106e0959493929190611280565b6020604051808303816000875af11580156106ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072391906112e8565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107b7576107b6610c5c565b5b600060018111156107cb576107ca610c5c565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107ff9190611344565b1190506000806000805490501190506000804711905083801561081f5750825b80156108285750815b80156108315750805b955085604051806020016040528060008152509550955050505050915091565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b60008080549050826000815181106108cc576108cb611179565b5b60200260200101516108de91906113a7565b905060008082815481106108f5576108f4611179565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561098957610988610c5c565b5b0217905550600067ffffffffffffffff8111156109a9576109a8610d04565b5b6040519080825280602002602001820160405280156109d75781602001602082028036833780820191505090505b50600090805190602001906109ed929190610ae2565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a1b90611409565b60006040518083038185875af1925050503d8060008114610a58576040519150601f19603f3d011682016040523d82523d6000602084013e610a5d565b606091505b5050905080610a98576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f1d4c260f1824cd028e6c9e6e31c3a0b94f2513e7a641113ec759d382f9bdd5a160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b5b579160200282015b82811115610b5a5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b02565b5b509050610b689190610b6c565b5090565b5b80821115610b85576000816000905550600101610b6d565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610bb081610b9d565b8114610bbb57600080fd5b50565b600081359050610bcd81610ba7565b92915050565b600060208284031215610be957610be8610b93565b5b6000610bf784828501610bbe565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c2b82610c00565b9050919050565b610c3b81610c20565b82525050565b6000602082019050610c566000830184610c32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c9c57610c9b610c5c565b5b50565b6000819050610cad82610c8b565b919050565b6000610cbd82610c9f565b9050919050565b610ccd81610cb2565b82525050565b6000602082019050610ce86000830184610cc4565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d3c82610cf3565b810181811067ffffffffffffffff82111715610d5b57610d5a610d04565b5b80604052505050565b6000610d6e610b89565b9050610d7a8282610d33565b919050565b600067ffffffffffffffff821115610d9a57610d99610d04565b5b602082029050602081019050919050565b600080fd5b6000610dc3610dbe84610d7f565b610d64565b90508083825260208201905060208402830185811115610de657610de5610dab565b5b835b81811015610e0f5780610dfb8882610bbe565b845260208401935050602081019050610de8565b5050509392505050565b600082601f830112610e2e57610e2d610cee565b5b8135610e3e848260208601610db0565b91505092915050565b60008060408385031215610e5e57610e5d610b93565b5b6000610e6c85828601610bbe565b925050602083013567ffffffffffffffff811115610e8d57610e8c610b98565b5b610e9985828601610e19565b9150509250929050565b610eac81610b9d565b82525050565b6000602082019050610ec76000830184610ea3565b92915050565b600080fd5b60008083601f840112610ee857610ee7610cee565b5b8235905067ffffffffffffffff811115610f0557610f04610ecd565b5b602083019150836001820283011115610f2157610f20610dab565b5b9250929050565b60008060208385031215610f3f57610f3e610b93565b5b600083013567ffffffffffffffff811115610f5d57610f5c610b98565b5b610f6985828601610ed2565b92509250509250929050565b6000610f8082610c00565b9050919050565b610f9081610f75565b82525050565b6000602082019050610fab6000830184610f87565b92915050565b600080fd5b600067ffffffffffffffff821115610fd157610fd0610d04565b5b610fda82610cf3565b9050602081019050919050565b82818337600083830152505050565b600061100961100484610fb6565b610d64565b90508281526020810184848401111561102557611024610fb1565b5b611030848285610fe7565b509392505050565b600082601f83011261104d5761104c610cee565b5b813561105d848260208601610ff6565b91505092915050565b60006020828403121561107c5761107b610b93565b5b600082013567ffffffffffffffff81111561109a57611099610b98565b5b6110a684828501611038565b91505092915050565b60008115159050919050565b6110c4816110af565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111045780820151818401526020810190506110e9565b60008484015250505050565b600061111b826110ca565b61112581856110d5565b93506111358185602086016110e6565b61113e81610cf3565b840191505092915050565b600060408201905061115e60008301856110bb565b81810360208301526111708184611110565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506111bd6000830185610f87565b6111ca6020830184610f87565b9392505050565b60006060820190506111e66000830186610ea3565b6111f36020830185610ea3565b6112006040830184610ea3565b949350505050565b6000819050919050565b61121b81611208565b82525050565b600067ffffffffffffffff82169050919050565b61123e81611221565b82525050565b600061ffff82169050919050565b61125b81611244565b82525050565b600063ffffffff82169050919050565b61127a81611261565b82525050565b600060a0820190506112956000830188611212565b6112a26020830187611235565b6112af6040830186611252565b6112bc6060830185611271565b6112c96080830184611271565b9695505050505050565b6000815190506112e281610ba7565b92915050565b6000602082840312156112fe576112fd610b93565b5b600061130c848285016112d3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061134f82610b9d565b915061135a83610b9d565b925082820390508181111561137257611371611315565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113b282610b9d565b91506113bd83610b9d565b9250826113cd576113cc611378565b5b828206905092915050565b600081905092915050565b50565b60006113f36000836113d8565b91506113fe826113e3565b600082019050919050565b6000611414826113e6565b915081905091905056fea26469706673582212209e8fbb9a54455a407c12bbd3404e6911f9c34c2eecf4aa9aa5a843bcbd60867d64736f6c63430008130033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    entraceFeed: BigNumberish,
    vrfCoordinatorV2: AddressLike,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      entraceFeed,
      vrfCoordinatorV2,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override deploy(
    entraceFeed: BigNumberish,
    vrfCoordinatorV2: AddressLike,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      entraceFeed,
      vrfCoordinatorV2,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
