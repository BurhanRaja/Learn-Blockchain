/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface RaffleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkUpkeep"
      | "enterRaffle"
      | "getEntranceFeed"
      | "getLastTimeStamp"
      | "getNumberOfWords"
      | "getOnePlayer"
      | "getRaffleState"
      | "getRecentWinner"
      | "getRequestConfirmations"
      | "getTotalPlayers"
      | "performUpkeep"
      | "rawFulfillRandomWords"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "RaffleEnter"
      | "RequestedRaffleWinner"
      | "WinnerSelected"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enterRaffle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEntranceFeed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTimeStamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOnePlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentWinner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequestConfirmations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEntranceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTimeStamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOnePlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequestConfirmations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
}

export namespace RaffleEnterEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestedRaffleWinnerEvent {
  export type InputTuple = [requestId: BigNumberish];
  export type OutputTuple = [requestId: bigint];
  export interface OutputObject {
    requestId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerSelectedEvent {
  export type InputTuple = [player: AddressLike];
  export type OutputTuple = [player: string];
  export interface OutputObject {
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Raffle extends BaseContract {
  connect(runner?: ContractRunner | null): Raffle;
  waitForDeployment(): Promise<this>;

  interface: RaffleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkUpkeep: TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;

  enterRaffle: TypedContractMethod<[], [void], "payable">;

  getEntranceFeed: TypedContractMethod<[], [bigint], "view">;

  getLastTimeStamp: TypedContractMethod<[], [bigint], "view">;

  getNumberOfWords: TypedContractMethod<[], [bigint], "view">;

  getOnePlayer: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getRaffleState: TypedContractMethod<[], [bigint], "view">;

  getRecentWinner: TypedContractMethod<[], [string], "view">;

  getRequestConfirmations: TypedContractMethod<[], [bigint], "view">;

  getTotalPlayers: TypedContractMethod<[], [bigint], "view">;

  performUpkeep: TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;

  rawFulfillRandomWords: TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [[boolean, string] & { upkeepNeeded: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "enterRaffle"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getEntranceFeed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastTimeStamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfWords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOnePlayer"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRaffleState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRecentWinner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRequestConfirmations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPlayers"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[arg0: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rawFulfillRandomWords"
  ): TypedContractMethod<
    [requestId: BigNumberish, randomWords: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RaffleEnter"
  ): TypedContractEvent<
    RaffleEnterEvent.InputTuple,
    RaffleEnterEvent.OutputTuple,
    RaffleEnterEvent.OutputObject
  >;
  getEvent(
    key: "RequestedRaffleWinner"
  ): TypedContractEvent<
    RequestedRaffleWinnerEvent.InputTuple,
    RequestedRaffleWinnerEvent.OutputTuple,
    RequestedRaffleWinnerEvent.OutputObject
  >;
  getEvent(
    key: "WinnerSelected"
  ): TypedContractEvent<
    WinnerSelectedEvent.InputTuple,
    WinnerSelectedEvent.OutputTuple,
    WinnerSelectedEvent.OutputObject
  >;

  filters: {
    "RaffleEnter(address)": TypedContractEvent<
      RaffleEnterEvent.InputTuple,
      RaffleEnterEvent.OutputTuple,
      RaffleEnterEvent.OutputObject
    >;
    RaffleEnter: TypedContractEvent<
      RaffleEnterEvent.InputTuple,
      RaffleEnterEvent.OutputTuple,
      RaffleEnterEvent.OutputObject
    >;

    "RequestedRaffleWinner(uint256)": TypedContractEvent<
      RequestedRaffleWinnerEvent.InputTuple,
      RequestedRaffleWinnerEvent.OutputTuple,
      RequestedRaffleWinnerEvent.OutputObject
    >;
    RequestedRaffleWinner: TypedContractEvent<
      RequestedRaffleWinnerEvent.InputTuple,
      RequestedRaffleWinnerEvent.OutputTuple,
      RequestedRaffleWinnerEvent.OutputObject
    >;

    "WinnerSelected(address)": TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
    WinnerSelected: TypedContractEvent<
      WinnerSelectedEvent.InputTuple,
      WinnerSelectedEvent.OutputTuple,
      WinnerSelectedEvent.OutputObject
    >;
  };
}
