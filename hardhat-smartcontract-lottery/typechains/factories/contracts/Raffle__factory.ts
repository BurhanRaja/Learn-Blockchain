/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "entraceFeed",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotEnoughEthEntered",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__NotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "players",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpKeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerSelected",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFeed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getOnePlayer",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getTotalPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610180604052600163ffffffff166101209063ffffffff168152503480156200002757600080fd5b50604051620019043803806200190483398181016040528101906200004d9190620002a9565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508561014081815250508473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250506000600160146101000a81548160ff0219169083600181111562000122576200012162000345565b5b02179055504260028190555080610160818152505050505050505062000374565b600080fd5b6000819050919050565b6200015d8162000148565b81146200016957600080fd5b50565b6000815190506200017d8162000152565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001b08262000183565b9050919050565b620001c281620001a3565b8114620001ce57600080fd5b50565b600081519050620001e281620001b7565b92915050565b6000819050919050565b620001fd81620001e8565b81146200020957600080fd5b50565b6000815190506200021d81620001f2565b92915050565b600067ffffffffffffffff82169050919050565b620002428162000223565b81146200024e57600080fd5b50565b600081519050620002628162000237565b92915050565b600063ffffffff82169050919050565b620002838162000268565b81146200028f57600080fd5b50565b600081519050620002a38162000278565b92915050565b60008060008060008060c08789031215620002c957620002c862000143565b5b6000620002d989828a016200016c565b9650506020620002ec89828a01620001d1565b9550506040620002ff89828a016200020c565b94505060606200031289828a0162000251565b93505060806200032589828a0162000292565b92505060a06200033889828a016200016c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516101605161150e620003f66000396000818161083e0152610915015260008181610416015261093d01526000818161070d01526108e7015260006106ec015260006106c9015260006106a80152600061066c01526000818161035601526103aa015261150e6000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f5780636f9d9c84116100595780636f9d9c841461024a57806391ad27b414610275578063b97cd82c146102a0578063c1c244e8146102cb576100c2565b8063473f1ddc146101b65780635f1b0fd8146101e15780636e04ff0d1461020c576100c2565b80630c9be7e5146100c7578063115cbaf5146101045780631fe543e31461012f5780632cfcc539146101585780634529cae7146101625780634585e33b1461018d575b600080fd5b3480156100d357600080fd5b506100ee60048036038101906100e99190610c8d565b6102f6565b6040516100fb9190610cfb565b60405180910390f35b34801561011057600080fd5b5061011961033d565b6040516101269190610d8d565b60405180910390f35b34801561013b57600080fd5b5061015660048036038101906101519190610f01565b610354565b005b610160610414565b005b34801561016e57600080fd5b50610177610583565b6040516101849190610f6c565b60405180910390f35b34801561019957600080fd5b506101b460048036038101906101af9190610fe2565b61058f565b005b3480156101c257600080fd5b506101cb6107c4565b6040516101d89190611050565b60405180910390f35b3480156101ed57600080fd5b506101f66107ee565b6040516102039190610f6c565b60405180910390f35b34801561021857600080fd5b50610233600480360381019061022e9190611120565b6107fb565b604051610241929190611203565b60405180910390f35b34801561025657600080fd5b5061025f6108e3565b60405161026c9190610f6c565b60405180910390f35b34801561028157600080fd5b5061028a610911565b6040516102979190610f6c565b60405180910390f35b3480156102ac57600080fd5b506102b5610939565b6040516102c29190610f6c565b60405180910390f35b3480156102d757600080fd5b506102e0610961565b6040516102ed9190610f6c565b60405180910390f35b600080828154811061030b5761030a611233565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103fd929190611262565b60405180910390fd5b610410828261096b565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561046e576040517f066d781f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561048257610481610d16565b5b600160149054906101000a900460ff1660018111156104a4576104a3610d16565b5b146104db576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60008080549050905090565b60006105cf6040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152506107fb565b5090508061063e5747600080549050600160149054906101000a900460ff166001811115610600576105ff610d16565b5b6040517f3a8d60860000000000000000000000000000000000000000000000000000000081526004016106359392919061128b565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066357610662610d16565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006040518663ffffffff1660e01b815260040161074c95949392919061133a565b6020604051808303816000875af115801561076b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078f91906113a2565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff16600181111561082357610822610d16565b5b6000600181111561083757610836610d16565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261086b91906113fe565b1190506000806000805490501190506000804711905083801561088b5750825b80156108945750815b801561089d5750805b9550856040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f000000000000000000000000000000000000000000000000000000000000000063ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600254905090565b600080805490508260008151811061098657610985611233565b5b60200260200101516109989190611461565b905060008082815481106109af576109ae611233565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a4357610a42610d16565b5b0217905550600067ffffffffffffffff811115610a6357610a62610dbe565b5b604051908082528060200260200182016040528015610a915781602001602082028036833780820191505090505b5060009080519060200190610aa7929190610b9c565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610ad5906114c3565b60006040518083038185875af1925050503d8060008114610b12576040519150601f19603f3d011682016040523d82523d6000602084013e610b17565b606091505b5050905080610b52576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f1d4c260f1824cd028e6c9e6e31c3a0b94f2513e7a641113ec759d382f9bdd5a160405160405180910390a25050505050565b828054828255906000526020600020908101928215610c15579160200282015b82811115610c145782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bbc565b5b509050610c229190610c26565b5090565b5b80821115610c3f576000816000905550600101610c27565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6a81610c57565b8114610c7557600080fd5b50565b600081359050610c8781610c61565b92915050565b600060208284031215610ca357610ca2610c4d565b5b6000610cb184828501610c78565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ce582610cba565b9050919050565b610cf581610cda565b82525050565b6000602082019050610d106000830184610cec565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610d5657610d55610d16565b5b50565b6000819050610d6782610d45565b919050565b6000610d7782610d59565b9050919050565b610d8781610d6c565b82525050565b6000602082019050610da26000830184610d7e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610df682610dad565b810181811067ffffffffffffffff82111715610e1557610e14610dbe565b5b80604052505050565b6000610e28610c43565b9050610e348282610ded565b919050565b600067ffffffffffffffff821115610e5457610e53610dbe565b5b602082029050602081019050919050565b600080fd5b6000610e7d610e7884610e39565b610e1e565b90508083825260208201905060208402830185811115610ea057610e9f610e65565b5b835b81811015610ec95780610eb58882610c78565b845260208401935050602081019050610ea2565b5050509392505050565b600082601f830112610ee857610ee7610da8565b5b8135610ef8848260208601610e6a565b91505092915050565b60008060408385031215610f1857610f17610c4d565b5b6000610f2685828601610c78565b925050602083013567ffffffffffffffff811115610f4757610f46610c52565b5b610f5385828601610ed3565b9150509250929050565b610f6681610c57565b82525050565b6000602082019050610f816000830184610f5d565b92915050565b600080fd5b60008083601f840112610fa257610fa1610da8565b5b8235905067ffffffffffffffff811115610fbf57610fbe610f87565b5b602083019150836001820283011115610fdb57610fda610e65565b5b9250929050565b60008060208385031215610ff957610ff8610c4d565b5b600083013567ffffffffffffffff81111561101757611016610c52565b5b61102385828601610f8c565b92509250509250929050565b600061103a82610cba565b9050919050565b61104a8161102f565b82525050565b60006020820190506110656000830184611041565b92915050565b600080fd5b600067ffffffffffffffff82111561108b5761108a610dbe565b5b61109482610dad565b9050602081019050919050565b82818337600083830152505050565b60006110c36110be84611070565b610e1e565b9050828152602081018484840111156110df576110de61106b565b5b6110ea8482856110a1565b509392505050565b600082601f83011261110757611106610da8565b5b81356111178482602086016110b0565b91505092915050565b60006020828403121561113657611135610c4d565b5b600082013567ffffffffffffffff81111561115457611153610c52565b5b611160848285016110f2565b91505092915050565b60008115159050919050565b61117e81611169565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156111be5780820151818401526020810190506111a3565b60008484015250505050565b60006111d582611184565b6111df818561118f565b93506111ef8185602086016111a0565b6111f881610dad565b840191505092915050565b60006040820190506112186000830185611175565b818103602083015261122a81846111ca565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820190506112776000830185611041565b6112846020830184611041565b9392505050565b60006060820190506112a06000830186610f5d565b6112ad6020830185610f5d565b6112ba6040830184610f5d565b949350505050565b6000819050919050565b6112d5816112c2565b82525050565b600067ffffffffffffffff82169050919050565b6112f8816112db565b82525050565b600061ffff82169050919050565b611315816112fe565b82525050565b600063ffffffff82169050919050565b6113348161131b565b82525050565b600060a08201905061134f60008301886112cc565b61135c60208301876112ef565b611369604083018661130c565b611376606083018561132b565b611383608083018461132b565b9695505050505050565b60008151905061139c81610c61565b92915050565b6000602082840312156113b8576113b7610c4d565b5b60006113c68482850161138d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061140982610c57565b915061141483610c57565b925082820390508181111561142c5761142b6113cf565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061146c82610c57565b915061147783610c57565b92508261148757611486611432565b5b828206905092915050565b600081905092915050565b50565b60006114ad600083611492565b91506114b88261149d565b600082019050919050565b60006114ce826114a0565b915081905091905056fea26469706673582212201bbbba8d415998d270863e09b40e09f1490c2e60194b857c1d8c0a4944f3a5d864736f6c63430008130033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    entraceFeed: BigNumberish,
    vrfCoordinatorV2: AddressLike,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      entraceFeed,
      vrfCoordinatorV2,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    );
  }
  override deploy(
    entraceFeed: BigNumberish,
    vrfCoordinatorV2: AddressLike,
    gasLane: BytesLike,
    subscriptionId: BigNumberish,
    callbackGasLimit: BigNumberish,
    interval: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      entraceFeed,
      vrfCoordinatorV2,
      gasLane,
      subscriptionId,
      callbackGasLimit,
      interval,
      overrides || {}
    ) as Promise<
      Raffle & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Raffle__factory {
    return super.connect(runner) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Raffle {
    return new Contract(address, _abi, runner) as unknown as Raffle;
  }
}
